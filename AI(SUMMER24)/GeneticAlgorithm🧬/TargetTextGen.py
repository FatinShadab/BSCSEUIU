import random
from GeneticAlgo import GeneticAlgorithm


class GA4Text(GeneticAlgorithm):
    def __init__(self, genes, target, populationSize=113, populationTransferLimit=13, gnomeSelectionMode=0):
        super().__init__()
        self.__configure(genes, target, populationSize, populationTransferLimit, gnomeSelectionMode)
    
    def __configure(self, genes, target, populationSize, populationTransferLimit, gnomeSelectionMode):
        self.set_genes(genes)
        
        self.matched = False
        self.generation = 0
        self.population = []
        self.target = target
        self.populationSize = populationSize
        self.ptl = populationTransferLimit
        self.pgl = 100 - self.ptl
        self.gnomeSelectionMode = gnomeSelectionMode
        
    def __fitness_func(self, inhabitant):
        return sum([1 for gi, gt in zip(inhabitant, self.target) if gi != gt])
        
    def __gen_inhabitant(self):
        self._GeneticAlgorithm__tune_random()
        return [random.choice(self.genes) for _ in range(len(self.target))]
            
    def __populate(self):
        for _ in range(self.populationSize):
            inhabitant = self.__gen_inhabitant()
            self.population.append((inhabitant, self.__fitness_func(inhabitant)))
    
    def re_configure(self, genes, target, populationSize, populationTransferLimit, gnomeSelectionMode):
        self.__configure(genes, target, populationSize, populationTransferLimit, gnomeSelectionMode)
    
    def start(self):
        self.__populate()
        
        #try:
        while not self.matched:
            self._GeneticAlgorithm__tune_random()
            
            self.population = sorted(
                self.population,
                key = lambda x: x[1]
            )
            
            if self.population[0][1] <= 0:
                self.matched = True
                break;
        
            newGen = self.population[:int((self.ptl*self.populationSize)/100)]
            for _ in range(int((self.pgl*self.populationSize)/100)):
                inhabitant1 = random.choice(self.population[:(self.populationSize//2)])
                inhabitant2 = random.choice(self.population[:(self.populationSize//2)])
                newBornInhabitant = self.crossover((inhabitant1[0], inhabitant2[0]), self.gnomeSelectionMode)
                newGen.append((newBornInhabitant, self.__fitness_func(newBornInhabitant)))

            self.population = newGen
            
            print(f"Current Generation: {self.generation}, Fittest Inhabitant: {''.join(self.population[0][0])} Fitness Value: {self.population[0][1]}")
            
            self.generation += 1
    
        # except Exception as e:
        #     print(e)
        #     pass
            
        return {
            "status": "sucess" if self.matched else "failed",
            "target": self.target,
            "outcome": "".join(self.population[0][0]),
            "outcome fitness": self.population[0][1],
            "Generation": self.generation,
            #"population": self.population,
        }


if __name__ == "__main__":
    genes = '''
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP 
    QRSTUVWXYZ 1234567890,~.-;:_!"#%&/()='?@${[]}
    '''
    #target = "I am generated by genetic crossover with mutation !"
    target = "It was fun implementing Genetic Algorithm for generating this text."
    
    gen = GA4Text(genes, target)
    
    res = gen.start()
    
    print(res)